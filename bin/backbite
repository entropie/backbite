#!/usr/bin/env ruby
# -*- mode:ruby -*-

require 'pathname'

ROOT = Pathname.new(File.expand_path(__FILE__)).dirname.dirname

require 'lib/backbite'

include Backbite
tlog = Tumblelog.new(:rspec, 'spec/.spec_skel/default_config.rb')

Backbite.optionparser(tlog) do |op|

  op.keyword(:help) do |op, handler|
    op.desc "The help!"
    op.declare(:index, 'this screen') {
      puts op.to_s
    }
  end
  
  op.keyword(:plugin, Backbite::Plugins) do |op, handler|
    op.declare(:generate) { |name|
      puts Generators.generate(name, handler)
    }

    op.declare(:generate) { |name|
      puts Generators.generate(name, handler)
    }
  end

  op.keyword(:components, tlog.components) do |op, handler|
    op.desc "create and manage components (ways to post)"
    op.declare(:ls, "lists components attached to the tumblog") {
      puts handler
    }

    op.declare(:generate, "generates a new component skelleton named <name>") { |name|
      puts Generators.generate(name, handler)
    }
  end

  
  op.keyword(:tlog, tlog) do |op, handler|

    op.desc "everything about your tumblog"

    op.declare(:ls, "basic information") {
      puts handler.repository
    }
    op.declare(:url, "the url to your tumblog") {
      puts handler.url
    }
    op.declare(:export, "export your tumblog <how>") { |how|
      puts handler.repository.export((how || 'all').to_sym)
    }

  end
  
  op.keyword(:post, tlog.posts) do |op, handler|
    op.desc "list, post and edit posts"
    op.declare(:ls, "lists pending posts") {|args|
      nargs =
      case args
      when nil
        { }
      when /(\d+)\.\.(\d+)/
        { :ids => Range.new($1.to_i, $2.to_i).to_a }
      when /(\d+)/
        { :ids => $1.to_i }
      when /^(\w+)/
        { :tags =>
          if args.include?(',')
            args.split(',')
          else
            [$1]
          end
        }
      when /^:(\w+)/
        { :target => $1.to_sym }
      end

      handler.filter(nargs).each do |r|
        puts r
      end
    }
  end
end

Backbite.run_options(tlog, *ARGV.dup)

