#!/usr/bin/env ruby
# -*- mode:ruby -*-

require 'pathname'

require 'lib/backbite'

include Backbite
tlog = nil

ARGV << 'help' if ARGV.empty?

if af = ARGV.first and r = Backbite.register[af.to_sym]
  Info << "Using #{af}"
  tlog = Backbite.register[ARGV.shift.to_sym]
end

if tlog.nil? and Backbite.register.default?
  tlog = Backbite.register.default
  warn "#{tlog.name} is not a valid repository." unless tlog.valid?
elsif Backbite.register.empty?
  warn "no tumblogs known"
elsif not tlog
  warn "there's no default tumblog"
end

op = Backbite.optionparser do |op|
  
  op.banner %Q(
This is Backbite [#{Backbite.version}]



To select a non-default tumblog just use its name as first argument.
All arguments be may shortened, write `#{'backbite post to editor'.white}` or
`#{'backbite po to ed'.white}`)
  
  op.keyword(:help) do |op, handler|
    op.desc "The help!"

    op.declare(:index, 'this screen') {
      puts op.to_s
    }
    op.declare(:version, 'Versions information') {
      puts Backbite.version
    }
  end
  
  # op.keyword(:plugin, Backbite::Plugins) do |op, handler|
  #   op.declare(:generate) { |name|
  #     puts Generators.generate(name, handler)
  #   }
  # end

  op.keyword(:generator) do |op, handler|
    op.desc "generate files"
    Generators.generators do |name, gen|
      op.declare(name.to_sym, "generates a new skelleton for #{name} named <name>") { |name|
        raise "need a name for the generator" unless name
        puts Generators.generate(name, gen, tlog)
      }
    end
  end
  if tlog
    op.keyword(:mail, Backbite::Helper::Mail) do |op, handler|
      op.desc "mail stuff"
      op.declare(:about, 'mail info to <receiver>') do |to|
        raise "need a Mail To" if to.empty?
        to.each do |mail|
          about = handler.about(tlog)
          handler.mailto("infos about tumblog #{tlog.name}",
                         about,
                         mail, tlog)
        end
      end

      op.declare(:script, "send tiny ruby script to <address> to build skeleton (or stdout w/o argument)") {|*to|
        script = Backbite::Helper::Script.generate(tlog, :posts)
        unless to.empty?
          to.each { |t|
            handler.mailto("Backbite: #{tlog.name}, Ruby Generator Script", script, t, tlog)
          }
        else
          puts script
        end
      }
      
      op.declare(:skel, "mail component skelleton <name> to <receiver>") { |name,to|
        raise "need a Mail To" unless to
        raise "need component name" unless name
        comp = tlog.components[name.to_sym]
        gentext = Generators.generate(comp.to_sym, Generators[:post], tlog)
        handler.mailto("backbite post skelleton #{comp.to_sym} for '#{tlog.name}'",
                       gentext,
                       to.to_s, tlog)
      }
    end
    
    if tlog.valid?

      op.keyword(:components, tlog.components) do |op, handler|
        op.desc "create and manage components (ways to post)"
        op.declare(:ls, "lists components attached to the tumblog") {
          puts handler
        }
        op.declare(:generate, "generates a new component skelleton named <name>") { |name|
          puts tlog.components.generate(tlog, name)
        }
      end

      [:posts, :archive].each do |phandler|

        op.keyword(phandler, tlog.send(phandler)) do |op, handler|
          op.desc "list, post and edit posts"

          op.declare(s=((phandler == :posts ? '' : 'un') + 'archive').to_sym,
                     "#{s} posts") { |args|
            nargs = Posts.parse_args(args.to_s)

            handler.filter(nargs).by_id!.each do |r|
              puts r
              r.send(s.to_s+'!') if Helper::YN::yn?
            end
          }
          
          if phandler == :posts
            op.declare(:ways, 'list ways to post') {
              puts tlog.components.ways.map{ |w|
                w.to_s.split('::').last.bold
              }.join(', ')
            }
            
            tlog.components.each do |comp|
              op.declare(comp.to_sym, "post to #{comp.to_sym} with [editor]") do |*w|
                way = unless w.empty? then tlog.way(w.to_s) else tlog.way end
                tlog.post(comp.to_sym, :way => way).save
              end
            end
            
            op.declare(:to, 'post to <component> [way] to the tumblog') { |c,w|
              way = tlog.way(w)
              puts "%s Bytes".red % [tlog.post(c.to_sym, :way => way).save.to_s.yellow]
            }
          end

          op.declare(:grep, "find posts by regular expression") do |regex|
            handler.filter(:grep => regex).by_id!.each do |post|
              puts post
              puts
            end
          end
          
          op.declare(:rm, "remove posts") do |*args|
            args = args.first if args and not args.empty?
            nargs = Posts.parse_args(args)
            handler.filter(nargs).by_id!.each do |r|
              unless Backbite.globals.force?
                puts r
                puts ("-"*60).white
                puts "remove me?".red
                r.remove! if Helper::YN::yn?
              else
                r.remove!
              end
            end
            tlog.repository.export.commit!
          end

          op.declare(:edit, "edit posts") do |*args|
            args = args.first if args and not args.empty?
            nargs = Posts.parse_args(args)
            handler.filter(nargs).by_id!.each do |r|
              r.edit!
            end
          end

          
          [:index, :ls].each do |key|
            op.declare(key, "lists posts, accepts ids, ranges, tags(,other) and :targets") {|*args|
              args = args.first if args and not args.empty?
              nargs = Posts.parse_args(args)

              handler.filter(nargs).by_id!.each do |r|
                puts r
                puts
              end
            }
          end
        end
      end
    end
  end

  if tlog and tlog.register
    op.keyword(:register, tlog.register) do |op, handler|
      op.desc "basically a set of tumblogs and maybe a default"

      op.declare(:ls, "lists registers"){
        puts handler
      }
    end
  end
  
  op.keyword(:tlog, tlog) do |op, handler|

    op.desc "everything about your tumblog"

    op.declare(:generate, "generates a tumblog named <name> to stdout") { |file|
      puts Generators.generate(file, Tumblelog)
    }

    op.declare(:setup, "lists tlog registers") {
      puts handler.repository.setup!
    }

    op.declare(:clean, 'clean the repository (eg. flushes tempfiles)'){
      handler.posts.archive!
      handler.repository.export.commit!
      puts "%i files removed".bold % handler.repository.clean!
    }
    
    op.declare(:lsr, "lists tlog registers") {
      puts handler.register
    }
    
    op.declare(:register, "register tlog with <name> and <configfile>") {|name, cfgf|
      if name and cfgf
        tlog = Tumblelog.new(name.to_sym, cfgf)
        Backbite.register[tlog.name] = cfgf
      end
      puts register
    }

    op.declare(:default, "set <default> tumblog"){ |*default|
      unless default.empty?
        default = default.shift
        tlog = Backbite.register[default.to_sym]
        Backbite.register.default = tlog
      end
      puts register
    }

    if handler
      op.declare(:ls, "basic information") {
        puts handler.repository
      }
      op.declare(:url, "the url to your tumblog") {
        puts handler.url
      }
      op.declare(:ways, "list the ways to post to the tumblog") {
        puts handler.repository.export.ways.map(&:to_s).map(&:bold).join(', ')
      }

      op.declare(:synchronize, "synchronize your repos") {
        handler.repository.export(:html)
        handler.repository.export(:atom)
        handler.repository.export(:txt)
        tlog.posts.archive_spool
        handler.repository.export.commit!
      }

      op.declare(:upload, "uploades your repos") {
        handler.repository.upload!
      }
      
      op.declare(:export, "export your tumblog <how>") { |*how|
        if not how or how.empty? or how.to_s == 'all'
          how = handler.repository.export.ways.join(',')
        end
        nhow = if how.to_s =~ /,/
                 how.to_s.split(',').map(&:strip).flatten
               else [how] end
        handler.posts.archive!
        nhow.map(&:to_sym).each do |h|
          handler.repository.export(h)
        end
        handler.repository.export.commit!
      }
    end
  end


end

begin
  op.parse(*ARGV.dup)
rescue GetReal => e
  puts e.inspect
end
