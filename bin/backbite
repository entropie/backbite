#!/usr/bin/env ruby
# -*- mode:ruby -*-

require 'pathname'

require 'lib/backbite'

include Backbite
tlog = nil

if af = ARGV.first and r = Backbite.register[af.to_sym]
  tlog = Backbite.register[ARGV.shift]
end

if tlog.nil? and Backbite.register.default?
  tlog = Tumblelog.new(*Backbite.register.default)
  warn "#{tlog.name} is not a valid repository." unless tlog.valid?
elsif Backbite.register.empty?
  warn "no tumblogs known"
else
  warn "there's no default tumblog"
end

op = Backbite.optionparser do |op|

  op.keyword(:help) do |op, handler|
    op.desc "The help!"

    op.declare(:index, 'this screen') {
      puts op.to_s
    }
  end
  
  op.keyword(:plugin, Backbite::Plugins) do |op, handler|
    op.declare(:generate) { |name|
      puts Generators.generate(name, handler)
    }
  end

  if tlog

    if tlog.valid?
      op.keyword(:components, tlog.components) do |op, handler|
        op.desc "create and manage components (ways to post)"
        op.declare(:ls, "lists components attached to the tumblog") {
          puts handler
        }

        op.declare(:generate, "generates a new component skelleton named <name>") { |name|
          puts tlog.components.generate(tlog, name)
        }
      end

      
      op.keyword(:post, tlog.posts) do |op, handler|
        op.desc "list, post and edit posts"
        op.declare(:ls, "lists pending posts") {|args|
          nargs =
          case args
          when nil
            { }
          when /(\d+)\.\.(\d+)/
            { :ids => Range.new($1.to_i, $2.to_i).to_a }
          when /(\d+)/
            { :ids => $1.to_i }
          when /^(\w+)/
            { :tags =>
              if args.include?(',')
                args.split(',')
              else
                [$1]
              end
            }
          when /^:(\w+)/
            { :target => $1.to_sym }
          end

          handler.filter(nargs.merge(:nosort => true)).each do |r|
            puts r
            puts
          end
        }
      end
    end
  end

  op.keyword(:tlog, tlog) do |op, handler|

    op.desc "everything about your tumblog"

    op.declare(:generate, "generates a config skeleton in <file>") { |file|
      puts Generators.generate(file, Tumblelog)
    }

    op.declare(:setup, "lists tlog registers") {
      puts handler.repository.setup!
    }

    op.declare(:lsr, "lists tlog registers") {
      puts handler.register
    }
    
    op.declare(:register, "register tlog with <name> and <configfile>") {|name, cfgf|
      if name and cfgf
        tlog = Tumblelog.new(name.to_sym, cfgf)
        Backbite.register[tlog.name] = cfgf
      end
      puts register
    }

    op.declare(:default, "set <default> tumblog"){ |*default|
      unless default.empty?
        default = default.shift
        
        d = default.to_sym
        cfg = Backbite.register[d]
        tlog = Tumblelog.new(default.to_sym, cfg)
        Backbite.register.default = tlog
      end
      puts register
    }

    if handler
      op.declare(:ls, "basic information") {
        puts handler.repository
      }
      op.declare(:url, "the url to your tumblog") {
        puts handler.url
      }
      op.declare(:export, "export your tumblog <how>") { |how|
        puts handler.repository.export((how || 'all').to_sym)
      }
    end
  end


end

op.parse(*ARGV.dup)

