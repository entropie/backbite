#
#
# Author:  Michael 'entropie' Trommer <mictro@gmail.com>
#

module Ackro

  class Post

    class Export

      module CSS

        def to_css(file, str = '')
          
        end
        
      end
      
    end

    module Repository::Export::CSS
      # mount point
      def self.export(tlog, params)
        ret = []
        retstr = ''
        tlog.config[:stylesheets][:files].each_pair { |ftype, m|
          tree = Tree.new(ftype, tlog, params)
          retstr << tree.to_s
        }
        #puts retstr
        #Tree.new(tlog, params)
      end

      class Tree < Repository::ExportTree

        def initialize(file, tlog, params)
          @filename = tlog.http_path("include/%s.css" % file).to_s
          super(tlog, params)
          @file = file
          @str = ''
          definition_for(file)
        end

        def definition_for(file)
          @str <<
            case file
            when :generated
              generated_definitions << "\n/* EOF: #{@filename} */\n\n\n"
            else
              Info << "Ingoring #{self.class}#definition: #{file}"
              ''
            end
        end
        
        def generated_definitions
          retstr = "/* \n   CSS file: `#{@filename}'\n"
          retstr << "   Autogenerated file; silly to edit. \n*/\n\n"
          Info << "ExportTree::CSS parsing for file: `#{@filename}'"


          # component basic definitions
          @tlog.components.each do |co|
            retstr << "  /* Component: `#{co.name}' */\n"
            retstr << "    #%s > .%s {\n" % [co.config[:target], co.name]
            co.config[:style].each_pair { |de, na|
              defi = de.to_s.gsub(/_/, '-')
              retstr << "      %s:%s;\n" % [defi, na]
            }
            retstr << "    }\n  /* End component `#{co.name}' */\n\n"            
          end

          retstr << "  /* Parsing component defined field definitions */\n\n"

          # per field definitions
          @tlog.components.each do |co|
            co.fields.each do |fn, fc|
              retstr << "  /* Component::#{co.name}::Field::#{fn.to_sym} */\n"
              retstr <<  "    #%s > .%s > .%s {\n" %
                [co.config[:target], co.name, fn.to_sym]
              fn.definitions[:style].each { |n, m|
                dn = n.to_s.gsub(/_/, '-')
                retstr << "     %s:%s;\n" % [dn, m]
              }
              retstr << "    }\n  /* END Component::#{co.name}::Field::#{fn.to_sym} */\n\n"
            end
          end

          file = @tlog.repository.join('htdocs', 'include', "#{ @file }.css")
          file.open('w+'){ |f| f.write(retstr)}
          puts file.readlines.join
          retstr
        end

        def to_s
          @str
        end
        
      end
      
    end
    
  end
end




=begin
Local Variables:
  mode:ruby
  fill-column:70
  indent-tabs-mode:nil
  ruby-indent-level:2
End:
=end
