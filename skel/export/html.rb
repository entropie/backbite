#
#
# Author:  Michael 'entropie' Trommer <mictro@gmail.com>
#

module Backbite

  module Post::Export::HTML

    include Helper::Builder

    def to_html(name)
      target = tlog.components[self.metadata[:component]]
      nam, fs, ident = self.name, fields, identifier
      res = proc {
        div(:class => "post #{nam}", :id => "#{ident}") { 
          target.fields.each do |field|
            name = field.to_sym
            field = fs[name.to_sym]

            opts, filtered = { }, field.apply_filter(:html)
            filtered = field.apply_markup(:html, filtered)

            tag = field.definitions[:tag] unless field.definitions[:tag].to_s.empty?
            tag ||= :div

            send(tag, filtered.to_s, :class => "field #{name}")
          end
        }
      }
    end
  end
  

  module Repository::Export::HTML # :nodoc: All
    
    def self.export(tlog, params)
      @tree = Tree.new(tlog, params)
      @tree.write unless params[:nowrite]
      @tree
    end

    class Tree < Repository::ExportTree

      include Helper::Builder
      #include Helper::CacheAble

      attr_reader :pyr
      attr_accessor :doctype

      def doctype
        @doctype ||= "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"DTD/xhtml1-transitional.dtd\">"
      end

      def encoding
        %Q(<?xml version="1.0" encoding="UTF-8" standalone="yes"?>)
      end
      
      def timestamp
        %Q(<!-- \n  Generated by Backbite at: #{Time.now}.\n  Have a nice Day.\n-->)
      end
      
      def initialize(tlog, params)
        super
        @file = 'index.html'
        @pyr = mktree
        mkbody
        @__result__ = to_html
      end

      def to_s
        encoding + "\n" + doctype + "\n\n" + timestamp + "\n" + @pyr.to_s
      end
      alias :to_html :to_s
      
      def mktree
        params = @params
        alternate, _title, = "#{params[:path_deep]}everythingatom.xml", @params[:title]
        jss, ssheets = tlog.config[:javascript][:files], tlog.config[:stylesheets].dup
        bsheets = { :screen => [:base, :generated] }
        
        Pyr.build{
          html(:xmlns => "http://www.w3.org/1999/xhtml", "xml:lang" => :en, :lang => :en) {
            head do

              title(_title)
              link(:type => 'application/atom+XML', :rel => 'alternate', :href => alternate)

              [bsheets, ssheets].each do |_sheets|
                _sheets.each_pair do |media, sheets|
                  sheets.each do |sheet|
                    link(:href => "#{params[:path_deep]}include/#{sheet}.css",
                         :media => media, :type => 'text/css', :rel => 'stylesheet')
                  end
                end
              end

              # javascript
              script(:charset => 'utf-8', :type => 'text-javascript')
              jss.each do |js|
                script(:src => "#{params[:path_deep]}include/#{js}.js",
                       :type => "text/javascript" )
              end
            end
          }
        }
      end

      # builds contents of a content node +node+ with name +name+.
      def mknode(name, node)
        posts = tlog.posts.filter(:target => name.to_sym).by_date!.reverse
        posts = posts.with_export(:html, @params.merge(:tree => self, :target => name))

        posts.each do |post|
          tag = (node[:tag] or :div)
          pyr = lambda{
            build(&post.to_html(name))
          }
          yield(tag, pyr)
        end
      end
      
      # builds entire body
      def mkbody
        target, bdys = self, tlog.config[:html][:body]
        pyr[:head].append{
          body {
            bdys.each do |name, node|
              next if Repository::IgnoredBodyFields.include?(name)
              tag = node[:tag] || :div
              send(tag, :id => name) do
                target.mknode(name, node) do |ele, pyr|
                  build(&pyr)
                end
              end
            end
          }
        }
      end
    end
    
    
  end
end

=begin
Local Variables:
 mode:ruby
 fill-column:70
 indent-tabs-mode:nil
 ruby-indent-level:2
End:
=end
